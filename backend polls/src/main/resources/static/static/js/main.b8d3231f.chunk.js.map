{"version":3,"sources":["constants/index.js","util/APIUtils.js","util/Colors.js","util/Helpers.js","poll/Poll.js","common/LoadingIndicator.js","poll/PollList.js","poll/NewPoll.js","user/login/Login.js","user/signup/Signup.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","poll.svg","common/AppHeader.js","common/PrivateRoute.js","app/App.js","registerServiceWorker.js","index.js"],"names":["API_BASE_URL","process","REACT_APP_API_BASE_URL","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllPolls","page","size","method","getUserCreatedPolls","username","getUserVotedPolls","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","formatDate","dateString","date","Date","monthIndex","getMonth","year","getFullYear","formatDateTime","dateTimeString","getDate","getHours","getMinutes","RadioGroup","Group","CompletedOrVotedPollChoice","props","className","round","percentVote","choice","text","isSelected","type","isWinner","style","width","Poll","calculatePercentage","poll","totalVotes","voteCount","selectedChoice","id","getWinningChoice","choices","reduce","prevChoice","currentChoice","Infinity","getTimeRemaining","difference_ms","expirationDateTime","getTime","seconds","floor","minutes","hours","days","pollChoices","this","expired","winningChoice","forEach","push","value","to","createdBy","backgroundColor","toUpperCase","creationDateTime","question","onChange","handleVoteChange","currentVote","disabled","onClick","handleVoteSubmit","Component","LoadingIndicator","antIcon","fontSize","spin","indicator","display","textAlign","marginTop","PollList","state","polls","totalElements","totalPages","last","currentVotes","isLoading","loadPollList","bind","handleLoadMore","promise","setState","slice","concat","content","Array","fill","catch","error","nextProps","isAuthenticated","event","pollIndex","target","preventDefault","history","notification","info","message","description","voteData","pollId","body","JSON","stringify","castVote","choiceId","status","handleLogout","pollViews","withRouter","Option","FormItem","Item","TextArea","PollChoice","validateStatus","help","errorMsg","placeholder","choiceNumber","handleChoiceChange","removeChoice","NewPoll","validateQuestion","questionText","validateChoice","choiceText","pollLength","addChoice","handleSubmit","handleQuestionChange","handlePollDaysChange","handlePollHoursChange","isFormInvalid","pollData","createPoll","map","choiceViews","onSubmit","autosize","minRows","maxRows","xs","sm","marginRight","defaultValue","from","keys","htmlType","Login","AntWrappedLoginForm","create","LoginForm","onLogin","form","validateFields","err","values","loginRequest","login","setItem","accessToken","getFieldDecorator","rules","required","prefix","Signup","validateName","validationStatus","validateEmail","email","RegExp","test","validateUsername","validatePassword","password","handleInputChange","validateUsernameAvailability","validateEmailAvailability","validationFun","inputName","inputValue","console","log","signupRequest","signup","success","label","autoComplete","hasFeedback","onBlur","usernameValue","usernameValidation","available","emailValue","emailValidation","NotFound","ServerError","TabPane","Profile","user","loadUserProfile","getUserProfile","notFound","serverError","match","params","joinedAt","defaultActiveKey","animated","tabBarStyle","tab","pollCount","Header","AppHeader","handleMenuClick","key","onLogout","menuItems","currentUser","src","pollIcon","alt","ProfileDropdownMenu","mode","selectedKeys","location","pathname","lineHeight","dropdownMenu","Divider","overlay","trigger","getPopupContainer","document","getElementsByClassName","PrivateRoute","component","authenticated","rest","render","Content","App","loadCurrentUser","handleLogin","config","placement","top","duration","redirectTo","notificationType","removeItem","exact","path","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b8d3231f.chunk.js","sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\r\nexport const ACCESS_TOKEN = 'accessToken';\r\n\r\nexport const POLL_LIST_SIZE = 30;\r\nexport const MAX_CHOICES = 6;\r\nexport const POLL_QUESTION_MAX_LENGTH = 140;\r\nexport const POLL_CHOICE_MAX_LENGTH = 40;\r\n\r\nexport const NAME_MIN_LENGTH = 4;\r\nexport const NAME_MAX_LENGTH = 40;\r\n\r\nexport const USERNAME_MIN_LENGTH = 3;\r\nexport const USERNAME_MAX_LENGTH = 15;\r\n\r\nexport const EMAIL_MAX_LENGTH = 40;\r\n\r\nexport const PASSWORD_MIN_LENGTH = 6;\r\nexport const PASSWORD_MAX_LENGTH = 20;","import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\r\n\r\nconst request = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\n\r\nexport function getAllPolls(page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function createPoll(pollData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls\",\r\n        method: 'POST',\r\n        body: JSON.stringify(pollData)         \r\n    });\r\n}\r\n\r\nexport function castVote(voteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\r\n        method: 'POST',\r\n        body: JSON.stringify(voteData)\r\n    });\r\n}\r\n\r\nexport function login(loginRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(loginRequest)\r\n    });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signup\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\nexport function checkUsernameAvailability(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\n\r\nexport function getCurrentUser() {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/user/me\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserProfile(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserCreatedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserVotedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}","const colors = [\r\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\r\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\r\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\r\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\r\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\r\n    '#4CAF50', '#ffeb3b', '#ffc107',\r\n];\r\n\r\nexport function getAvatarColor(name) {\r\n    name = name.substr(0, 6);\r\n\r\n    var hash = 0;\r\n    for (var i = 0; i < name.length; i++) {\r\n        hash = 31 * hash + name.charCodeAt(i);\r\n    }\r\n    var index = Math.abs(hash % colors.length);\r\n    return colors[index];\r\n}","export function formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n\r\n    const monthNames = [\r\n      \"January\", \"February\", \"March\",\r\n      \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\",\r\n      \"November\", \"December\"\r\n    ];\r\n  \r\n    const monthIndex = date.getMonth();\r\n    const year = date.getFullYear();\r\n  \r\n    return monthNames[monthIndex] + ' ' + year;\r\n}\r\n  \r\nexport function formatDateTime(dateTimeString) {\r\n  const date = new Date(dateTimeString);\r\n\r\n  const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\r\n    \"May\", \"Jun\", \"Jul\", \"Aug\", \r\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n  ];\r\n\r\n  const monthIndex = date.getMonth();\r\n  const year = date.getFullYear();\r\n\r\n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + date.getMinutes();\r\n}  ","import React, { Component } from 'react';\r\nimport './Poll.css';\r\nimport { Avatar, Icon } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { getAvatarColor } from '../util/Colors';\r\nimport { formatDateTime } from '../util/Helpers';\r\n\r\nimport { Radio, Button } from 'antd';\r\nconst RadioGroup = Radio.Group;\r\n\r\nclass Poll extends Component {\r\n    calculatePercentage = (choice) => {\r\n        if(this.props.poll.totalVotes === 0) {\r\n            return 0;\r\n        }\r\n        return (choice.voteCount*100)/(this.props.poll.totalVotes);\r\n    };\r\n\r\n    isSelected = (choice) => {\r\n        return this.props.poll.selectedChoice === choice.id;\r\n    }\r\n\r\n    getWinningChoice = () => {\r\n        return this.props.poll.choices.reduce((prevChoice, currentChoice) => \r\n            currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice, \r\n            {voteCount: -Infinity}\r\n        );\r\n    }\r\n\r\n    getTimeRemaining = (poll) => {\r\n        const expirationTime = new Date(poll.expirationDateTime).getTime();\r\n        const currentTime = new Date().getTime();\r\n    \r\n        var difference_ms = expirationTime - currentTime;\r\n        var seconds = Math.floor( (difference_ms/1000) % 60 );\r\n        var minutes = Math.floor( (difference_ms/1000/60) % 60 );\r\n        var hours = Math.floor( (difference_ms/(1000*60*60)) % 24 );\r\n        var days = Math.floor( difference_ms/(1000*60*60*24) );\r\n    \r\n        let timeRemaining;\r\n    \r\n        if(days > 0) {\r\n            timeRemaining = days + \" days left\";\r\n        } else if (hours > 0) {\r\n            timeRemaining = hours + \" hours left\";\r\n        } else if (minutes > 0) {\r\n            timeRemaining = minutes + \" minutes left\";\r\n        } else if(seconds > 0) {\r\n            timeRemaining = seconds + \" seconds left\";\r\n        } else {\r\n            timeRemaining = \"less than a second left\";\r\n        }\r\n        \r\n        return timeRemaining;\r\n    }\r\n\r\n    render() {\r\n        const pollChoices = [];\r\n        if(this.props.poll.selectedChoice || this.props.poll.expired) {\r\n            const winningChoice = this.props.poll.expired ? this.getWinningChoice() : null;\r\n\r\n            this.props.poll.choices.forEach(choice => {\r\n                pollChoices.push(<CompletedOrVotedPollChoice \r\n                    key={choice.id} \r\n                    choice={choice}\r\n                    isWinner={winningChoice && choice.id === winningChoice.id}\r\n                    isSelected={this.isSelected(choice)}\r\n                    percentVote={this.calculatePercentage(choice)} \r\n                />);\r\n            });                \r\n        } else {\r\n            this.props.poll.choices.forEach(choice => {\r\n                pollChoices.push(<Radio className=\"poll-choice-radio\" key={choice.id} value={choice.id}>{choice.text}</Radio>)\r\n            })    \r\n        }        \r\n        return (\r\n            <div className=\"poll-content\">\r\n                <div className=\"poll-header\">\r\n                    <div className=\"poll-creator-info\">\r\n                        <Link className=\"creator-link\" to={`/users/${this.props.poll.createdBy.username}`}>\r\n                            <Avatar className=\"poll-creator-avatar\" \r\n                                style={{ backgroundColor: getAvatarColor(this.props.poll.createdBy.name)}} >\r\n                                {this.props.poll.createdBy.name[0].toUpperCase()}\r\n                            </Avatar>\r\n                            <span className=\"poll-creator-name\">\r\n                                {this.props.poll.createdBy.name}\r\n                            </span>\r\n                            <span className=\"poll-creator-username\">\r\n                                @{this.props.poll.createdBy.username}\r\n                            </span>\r\n                            <span className=\"poll-creation-date\">\r\n                                {formatDateTime(this.props.poll.creationDateTime)}\r\n                            </span>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"poll-question\">\r\n                        {this.props.poll.question}\r\n                    </div>\r\n                </div>\r\n                <div className=\"poll-choices\">\r\n                    <RadioGroup \r\n                        className=\"poll-choice-radio-group\" \r\n                        onChange={this.props.handleVoteChange} \r\n                        value={this.props.currentVote}>\r\n                        { pollChoices }\r\n                    </RadioGroup>\r\n                </div>\r\n                <div className=\"poll-footer\">\r\n                    { \r\n                        !(this.props.poll.selectedChoice || this.props.poll.expired) ?\r\n                        (<Button className=\"vote-button\" disabled={!this.props.currentVote} onClick={this.props.handleVoteSubmit}>Vote</Button>) : null \r\n                    }\r\n                    <span className=\"total-votes\">{this.props.poll.totalVotes} votes</span>\r\n                    <span className=\"separator\">•</span>\r\n                    <span className=\"time-left\">\r\n                        {\r\n                            this.props.poll.expired ? \"Final results\" :\r\n                            this.getTimeRemaining(this.props.poll)\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction CompletedOrVotedPollChoice(props) {\r\n    return (\r\n        <div className=\"cv-poll-choice\">\r\n            <span className=\"cv-poll-choice-details\">\r\n                <span className=\"cv-choice-percentage\">\r\n                    {Math.round(props.percentVote * 100) / 100}%\r\n                </span>            \r\n                <span className=\"cv-choice-text\">\r\n                    {props.choice.text}\r\n                </span>\r\n                {\r\n                    props.isSelected ? (\r\n                    <Icon\r\n                        className=\"selected-choice-icon\"\r\n                        type=\"check-circle-o\"\r\n                    /> ): null\r\n                }    \r\n            </span>\r\n            <span className={props.isWinner ? 'cv-choice-percent-chart winner': 'cv-choice-percent-chart'} \r\n                style={{width: props.percentVote + '%' }}>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Poll;","import React from 'react';\r\nimport { Spin, Icon } from 'antd';\r\n\r\nexport default function LoadingIndicator(props) {\r\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\r\n    return (\r\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { getAllPolls, getUserCreatedPolls, getUserVotedPolls } from '../util/APIUtils';\r\nimport Poll from './Poll';\r\nimport { castVote } from '../util/APIUtils';\r\nimport LoadingIndicator  from '../common/LoadingIndicator';\r\nimport { Button, Icon, notification } from 'antd';\r\nimport { POLL_LIST_SIZE } from '../constants';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './PollList.css';\r\n\r\nclass PollList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            polls: [],\r\n            page: 0,\r\n            size: 10,\r\n            totalElements: 0,\r\n            totalPages: 0,\r\n            last: true,\r\n            currentVotes: [],\r\n            isLoading: false\r\n        };\r\n        this.loadPollList = this.loadPollList.bind(this);\r\n        this.handleLoadMore = this.handleLoadMore.bind(this);\r\n    }\r\n\r\n    loadPollList(page = 0, size = POLL_LIST_SIZE) {\r\n        let promise;\r\n        if(this.props.username) {\r\n            if(this.props.type === 'USER_CREATED_POLLS') {\r\n                promise = getUserCreatedPolls(this.props.username, page, size);\r\n            } else if (this.props.type === 'USER_VOTED_POLLS') {\r\n                promise = getUserVotedPolls(this.props.username, page, size);                               \r\n            }\r\n        } else {\r\n            promise = getAllPolls(page, size);\r\n        }\r\n\r\n        if(!promise) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        promise            \r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            const currentVotes = this.state.currentVotes.slice();\r\n\r\n            this.setState({\r\n                polls: polls.concat(response.content),\r\n                page: response.page,\r\n                size: response.size,\r\n                totalElements: response.totalElements,\r\n                totalPages: response.totalPages,\r\n                last: response.last,\r\n                currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\r\n                isLoading: false\r\n            })\r\n        }).catch(error => {\r\n            this.setState({\r\n                isLoading: false\r\n            })\r\n        });  \r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadPollList();\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\r\n            // Reset State\r\n            this.setState({\r\n                polls: [],\r\n                page: 0,\r\n                size: 10,\r\n                totalElements: 0,\r\n                totalPages: 0,\r\n                last: true,\r\n                currentVotes: [],\r\n                isLoading: false\r\n            });    \r\n            this.loadPollList();\r\n        }\r\n    }\r\n\r\n    handleLoadMore() {\r\n        this.loadPollList(this.state.page + 1);\r\n    }\r\n\r\n    handleVoteChange(event, pollIndex) {\r\n        const currentVotes = this.state.currentVotes.slice();\r\n        currentVotes[pollIndex] = event.target.value;\r\n\r\n        this.setState({\r\n            currentVotes: currentVotes\r\n        });\r\n    }\r\n\r\n\r\n    handleVoteSubmit(event, pollIndex) {\r\n        event.preventDefault();\r\n        if(!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",          \r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.polls[pollIndex];\r\n        const selectedChoice = this.state.currentVotes[pollIndex];\r\n\r\n        const voteData = {\r\n            pollId: poll.id,\r\n            choiceId: selectedChoice\r\n        };\r\n\r\n        castVote(voteData)\r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            polls[pollIndex] = response;\r\n            this.setState({\r\n                polls: polls\r\n            });        \r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });                \r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const pollViews = [];\r\n        this.state.polls.forEach((poll, pollIndex) => {\r\n            pollViews.push(<Poll \r\n                key={poll.id} \r\n                poll={poll}\r\n                currentVote={this.state.currentVotes[pollIndex]} \r\n                handleVoteChange={(event) => this.handleVoteChange(event, pollIndex)}\r\n                handleVoteSubmit={(event) => this.handleVoteSubmit(event, pollIndex)} />)            \r\n        });\r\n\r\n        return (\r\n            <div className=\"polls-container\">\r\n                {pollViews}\r\n                {\r\n                    !this.state.isLoading && this.state.polls.length === 0 ? (\r\n                        <div className=\"no-polls-found\">\r\n                            <span>No Polls Found.</span>\r\n                        </div>    \r\n                    ): null\r\n                }  \r\n                {\r\n                    !this.state.isLoading && !this.state.last ? (\r\n                        <div className=\"load-more-polls\"> \r\n                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                <Icon type=\"plus\" /> Load more\r\n                            </Button>\r\n                        </div>): null\r\n                }              \r\n                {\r\n                    this.state.isLoading ? \r\n                    <LoadingIndicator />: null                     \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(PollList);\r\n","import React, { Component } from 'react';\r\nimport { createPoll } from '../util/APIUtils';\r\nimport { MAX_CHOICES, POLL_QUESTION_MAX_LENGTH, POLL_CHOICE_MAX_LENGTH } from '../constants';\r\nimport './NewPoll.css';  \r\nimport { Form, Input, Button, Icon, Select, Col, notification } from 'antd';\r\nconst Option = Select.Option;\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input\r\n\r\nclass NewPoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: {\r\n                text: ''\r\n            },\r\n            choices: [{\r\n                text: ''\r\n            }, {\r\n                text: ''\r\n            }],\r\n            pollLength: {\r\n                days: 1,\r\n                hours: 0\r\n            }\r\n        };\r\n        this.addChoice = this.addChoice.bind(this);\r\n        this.removeChoice = this.removeChoice.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleQuestionChange = this.handleQuestionChange.bind(this);\r\n        this.handleChoiceChange = this.handleChoiceChange.bind(this);\r\n        this.handlePollDaysChange = this.handlePollDaysChange.bind(this);\r\n        this.handlePollHoursChange = this.handlePollHoursChange.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    addChoice(event) {\r\n        const choices = this.state.choices.slice();        \r\n        this.setState({\r\n            choices: choices.concat([{\r\n                text: ''\r\n            }])\r\n        });\r\n    }\r\n\r\n    removeChoice(choiceNumber) {\r\n        const choices = this.state.choices.slice();\r\n        this.setState({\r\n            choices: [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber+1)]\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const pollData = {\r\n            question: this.state.question.text,\r\n            choices: this.state.choices.map(choice => {\r\n                return {text: choice.text} \r\n            }),\r\n            pollLength: this.state.pollLength\r\n        };\r\n\r\n        createPoll(pollData)\r\n        .then(response => {\r\n            this.props.history.push(\"/\");\r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create poll.');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });              \r\n            }\r\n        });\r\n    }\r\n\r\n    validateQuestion = (questionText) => {\r\n        if(questionText.length === 0) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Please enter your question!'\r\n            }\r\n        } else if (questionText.length > POLL_QUESTION_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Question is too long (Maximum ${POLL_QUESTION_MAX_LENGTH} characters allowed)`\r\n            }    \r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    handleQuestionChange(event) {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            question: {\r\n                text: value,\r\n                ...this.validateQuestion(value)\r\n            }\r\n        });\r\n    }\r\n\r\n    validateChoice = (choiceText) => {\r\n        if(choiceText.length === 0) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Please enter a choice!'\r\n            }\r\n        } else if (choiceText.length > POLL_CHOICE_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Choice is too long (Maximum ${POLL_CHOICE_MAX_LENGTH} characters allowed)`\r\n            }    \r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChoiceChange(event, index) {\r\n        const choices = this.state.choices.slice();\r\n        const value = event.target.value;\r\n\r\n        choices[index] = {\r\n            text: value,\r\n            ...this.validateChoice(value)\r\n        }\r\n\r\n        this.setState({\r\n            choices: choices\r\n        });\r\n    }\r\n\r\n\r\n    handlePollDaysChange(value) {\r\n        const pollLength = Object.assign(this.state.pollLength, {days: value});\r\n        this.setState({\r\n            pollLength: pollLength\r\n        });\r\n    }\r\n\r\n    handlePollHoursChange(value) {\r\n        const pollLength = Object.assign(this.state.pollLength, {hours: value});\r\n        this.setState({\r\n            pollLength: pollLength\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        if(this.state.question.validateStatus !== 'success') {\r\n            return true;\r\n        }\r\n    \r\n        for(let i = 0; i < this.state.choices.length; i++) {\r\n            const choice = this.state.choices[i];            \r\n            if(choice.validateStatus !== 'success') {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const choiceViews = [];\r\n        this.state.choices.forEach((choice, index) => {\r\n            choiceViews.push(<PollChoice key={index} choice={choice} choiceNumber={index} removeChoice={this.removeChoice} handleChoiceChange={this.handleChoiceChange}/>);\r\n        });\r\n\r\n        return (\r\n            <div className=\"new-poll-container\">\r\n                <h1 className=\"page-title\">Create Poll</h1>\r\n                <div className=\"new-poll-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"create-poll-form\">\r\n                        <FormItem validateStatus={this.state.question.validateStatus}\r\n                            help={this.state.question.errorMsg} className=\"poll-form-row\">\r\n                        <TextArea \r\n                            placeholder=\"Enter your question\"\r\n                            style = {{ fontSize: '16px' }} \r\n                            autosize={{ minRows: 3, maxRows: 6 }} \r\n                            name = \"question\"\r\n                            value = {this.state.question.text}\r\n                            onChange = {this.handleQuestionChange} />\r\n                        </FormItem>\r\n                        {choiceViews}\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <Button type=\"dashed\" onClick={this.addChoice} disabled={this.state.choices.length === MAX_CHOICES}>\r\n                                <Icon type=\"plus\" /> Add a choice\r\n                            </Button>\r\n                        </FormItem>\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <Col xs={24} sm={4}>\r\n                                Poll length: \r\n                            </Col>\r\n                            <Col xs={24} sm={20}>    \r\n                                <span style = {{ marginRight: '18px' }}>\r\n                                    <Select \r\n                                        name=\"days\"\r\n                                        defaultValue=\"1\" \r\n                                        onChange={this.handlePollDaysChange}\r\n                                        value={this.state.pollLength.days}\r\n                                        style={{ width: 60 }} >\r\n                                        {\r\n                                            Array.from(Array(8).keys()).map(i => \r\n                                                <Option key={i}>{i}</Option>                                        \r\n                                            )\r\n                                        }\r\n                                    </Select> &nbsp;Days\r\n                                </span>\r\n                                <span>\r\n                                    <Select \r\n                                        name=\"hours\"\r\n                                        defaultValue=\"0\" \r\n                                        onChange={this.handlePollHoursChange}\r\n                                        value={this.state.pollLength.hours}\r\n                                        style={{ width: 60 }} >\r\n                                        {\r\n                                            Array.from(Array(24).keys()).map(i => \r\n                                                <Option key={i}>{i}</Option>                                        \r\n                                            )\r\n                                        }\r\n                                    </Select> &nbsp;Hours\r\n                                </span>\r\n                            </Col>\r\n                        </FormItem>\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                disabled={this.isFormInvalid()}\r\n                                className=\"create-poll-form-button\">Create Poll</Button>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction PollChoice(props) {\r\n    return (\r\n        <FormItem validateStatus={props.choice.validateStatus}\r\n        help={props.choice.errorMsg} className=\"poll-form-row\">\r\n            <Input \r\n                placeholder = {'Choice ' + (props.choiceNumber + 1)}\r\n                size=\"large\"\r\n                value={props.choice.text} \r\n                className={ props.choiceNumber > 1 ? \"optional-choice\": null}\r\n                onChange={(event) => props.handleChoiceChange(event, props.choiceNumber)} />\r\n\r\n            {\r\n                props.choiceNumber > 1 ? (\r\n                <Icon\r\n                    className=\"dynamic-delete-button\"\r\n                    type=\"close\"\r\n                    disabled={props.choiceNumber <= 1}\r\n                    onClick={() => props.removeChoice(props.choiceNumber)}\r\n                /> ): null\r\n            }    \r\n        </FormItem>\r\n    );\r\n}\r\n\r\n\r\nexport default NewPoll;","import React, { Component } from 'react';\r\nimport { login } from '../../util/APIUtils';\r\nimport './Login.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ACCESS_TOKEN } from '../../constants';\r\n\r\nimport { Form, Input, Button, Icon, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Login extends Component {\r\n    render() {\r\n        const AntWrappedLoginForm = Form.create()(LoginForm)\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1 className=\"page-title\">Login</h1>\r\n                <div className=\"login-content\">\r\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();   \r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                const loginRequest = Object.assign({}, values);\r\n                login(loginRequest)\r\n                .then(response => {\r\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\r\n                    this.props.onLogin();\r\n                }).catch(error => {\r\n                    if(error.status === 401) {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: 'Your Username or Password is incorrect. Please try again!'\r\n                        });                    \r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });                                            \r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <FormItem>\r\n                    {getFieldDecorator('usernameOrEmail', {\r\n                        rules: [{ required: true, message: 'Please input your username or email!' }],\r\n                    })(\r\n                    <Input \r\n                        prefix={<Icon type=\"user\" />}\r\n                        size=\"large\"\r\n                        name=\"usernameOrEmail\" \r\n                        placeholder=\"Username or Email\" />    \r\n                    )}\r\n                </FormItem>\r\n                <FormItem>\r\n                {getFieldDecorator('password', {\r\n                    rules: [{ required: true, message: 'Please input your Password!' }],\r\n                })(\r\n                    <Input \r\n                        prefix={<Icon type=\"lock\" />}\r\n                        size=\"large\"\r\n                        name=\"password\" \r\n                        type=\"password\" \r\n                        placeholder=\"Password\"  />                        \r\n                )}\r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\r\n                    Or <Link to=\"/signup\">register now!</Link>\r\n                </FormItem>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\r\nimport './Signup.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../../constants';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log(\"test\");\r\n        event.preventDefault();\r\n    \r\n        const signupRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n            });          \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Sign Up</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your full name\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Sign up</Button>\r\n                            Already registed? <Link to=\"/login\">Login now!</Link>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Signup;","import React, { Component } from 'react';\r\nimport './NotFound.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-not-found\">\r\n                <h1 className=\"title\">\r\n                    404\r\n                </h1>\r\n                <div className=\"desc\">\r\n                    The Page you're looking for was not found.\r\n                </div>\r\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport './ServerError.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nclass ServerError extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"server-error-page\">\r\n                <h1 className=\"server-error-title\">\r\n                    500\r\n                </h1>\r\n                <div className=\"server-error-desc\">\r\n                    Oops! Something went wrong at our Server. Why don't you go back?\r\n                </div>\r\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ServerError;","import React, { Component } from 'react';\r\nimport PollList from '../../poll/PollList';\r\nimport { getUserProfile } from '../../util/APIUtils';\r\nimport { Avatar, Tabs } from 'antd';\r\nimport { getAvatarColor } from '../../util/Colors';\r\nimport { formatDate } from '../../util/Helpers';\r\nimport LoadingIndicator  from '../../common/LoadingIndicator';\r\nimport './Profile.css';\r\nimport NotFound from '../../common/NotFound';\r\nimport ServerError from '../../common/ServerError';\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            isLoading: false\r\n        }\r\n        this.loadUserProfile = this.loadUserProfile.bind(this);\r\n    }\r\n\r\n    loadUserProfile(username) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUserProfile(username)\r\n        .then(response => {\r\n            this.setState({\r\n                user: response,\r\n                isLoading: false\r\n            });\r\n        }).catch(error => {\r\n            if(error.status === 404) {\r\n                this.setState({\r\n                    notFound: true,\r\n                    isLoading: false\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    serverError: true,\r\n                    isLoading: false\r\n                });        \r\n            }\r\n        });        \r\n    }\r\n      \r\n    componentDidMount() {\r\n        const username = this.props.match.params.username;\r\n        this.loadUserProfile(username);\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if(this.props.match.params.username !== nextProps.match.params.username) {\r\n            this.loadUserProfile(nextProps.match.params.username);\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoading) {\r\n            return <LoadingIndicator />;\r\n        }\r\n\r\n        if(this.state.notFound) {\r\n            return <NotFound />;\r\n        }\r\n\r\n        if(this.state.serverError) {\r\n            return <ServerError />;\r\n        }\r\n\r\n        const tabBarStyle = {\r\n            textAlign: 'center'\r\n        };\r\n\r\n        return (\r\n            <div className=\"profile\">\r\n                { \r\n                    this.state.user ? (\r\n                        <div className=\"user-profile\">\r\n                            <div className=\"user-details\">\r\n                                <div className=\"user-avatar\">\r\n                                    <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\r\n                                        {this.state.user.name[0].toUpperCase()}\r\n                                    </Avatar>\r\n                                </div>\r\n                                <div className=\"user-summary\">\r\n                                    <div className=\"full-name\">{this.state.user.name}</div>\r\n                                    <div className=\"username\">@{this.state.user.username}</div>\r\n                                    <div className=\"user-joined\">\r\n                                        Joined {formatDate(this.state.user.joinedAt)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-poll-details\">    \r\n                                <Tabs defaultActiveKey=\"1\" \r\n                                    animated={false}\r\n                                    tabBarStyle={tabBarStyle}\r\n                                    size=\"large\"\r\n                                    className=\"profile-tabs\">\r\n                                    <TabPane tab={`${this.state.user.pollCount} Polls`} key=\"1\">\r\n                                        <PollList username={this.props.match.params.username} type=\"USER_CREATED_POLLS\" />\r\n                                    </TabPane>\r\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`}  key=\"2\">\r\n                                        <PollList username={this.props.match.params.username} type=\"USER_VOTED_POLLS\" />\r\n                                    </TabPane>\r\n                                </Tabs>\r\n                            </div>  \r\n                        </div>  \r\n                    ): null               \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","export default __webpack_public_path__ + \"static/media/poll.7dd82f4b.svg\";","import React, { Component } from 'react';\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport './AppHeader.css';\r\nimport pollIcon from '../poll.svg';\r\nimport { Layout, Menu, Dropdown, Icon } from 'antd';\r\nconst Header = Layout.Header;\r\n    \r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);   \r\n        this.handleMenuClick = this.handleMenuClick.bind(this);   \r\n    }\r\n\r\n    handleMenuClick({ key }) {\r\n      if(key === \"logout\") {\r\n        this.props.onLogout();\r\n      }\r\n    }\r\n\r\n    render() {\r\n        let menuItems;\r\n        if(this.props.currentUser) {\r\n          menuItems = [\r\n            <Menu.Item key=\"/\">\r\n              <Link to=\"/\">\r\n                <Icon type=\"home\" className=\"nav-icon\" />\r\n              </Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/poll/new\">\r\n            <Link to=\"/poll/new\">\r\n              <img src={pollIcon} alt=\"poll\" className=\"poll-icon\" />\r\n            </Link>\r\n          </Menu.Item>,\r\n          <Menu.Item key=\"/profile\" className=\"profile-menu\">\r\n                <ProfileDropdownMenu \r\n                  currentUser={this.props.currentUser} \r\n                  handleMenuClick={this.handleMenuClick}/>\r\n            </Menu.Item>\r\n          ]; \r\n        } else {\r\n          menuItems = [\r\n            <Menu.Item key=\"/login\">\r\n              <Link to=\"/login\">Login</Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/signup\">\r\n              <Link to=\"/signup\">Signup</Link>\r\n            </Menu.Item>                  \r\n          ];\r\n        }\r\n\r\n        return (\r\n            <Header className=\"app-header\">\r\n            <div className=\"container\">\r\n              <div className=\"app-title\" >\r\n                <Link to=\"/\">Polling App</Link>\r\n              </div>\r\n              <Menu\r\n                className=\"app-menu\"\r\n                mode=\"horizontal\"\r\n                selectedKeys={[this.props.location.pathname]}\r\n                style={{ lineHeight: '64px' }} >\r\n                  {menuItems}\r\n              </Menu>\r\n            </div>\r\n          </Header>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ProfileDropdownMenu(props) {\r\n  const dropdownMenu = (\r\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\r\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\r\n        <div className=\"user-full-name-info\">\r\n          {props.currentUser.name}\r\n        </div>\r\n        <div className=\"username-info\">\r\n          @{props.currentUser.username}\r\n        </div>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\r\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\r\n        Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown \r\n      overlay={dropdownMenu} \r\n      trigger={['click']}\r\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\r\n      <a className=\"ant-dropdown-link\">\r\n         <Icon type=\"user\" className=\"nav-icon\" style={{marginRight: 0}} /> <Icon type=\"down\" />\r\n      </a>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n\r\nexport default withRouter(AppHeader);","import React from 'react';\r\nimport {\r\n    Route,\r\n    Redirect\r\n  } from \"react-router-dom\";\r\n  \r\n  \r\nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        authenticated ? (\r\n          <Component {...rest} {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n              state: { from: props.location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n);\r\n  \r\nexport default PrivateRoute\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Route,\n  withRouter,\n  Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../constants';\n\nimport PollList from '../poll/PollList';\nimport NewPoll from '../poll/NewPoll';\nimport Login from '../user/login/Login';\nimport Signup from '../user/signup/Signup';\nimport Profile from '../user/profile/Profile';\nimport AppHeader from '../common/AppHeader';\nimport NotFound from '../common/NotFound';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport PrivateRoute from '../common/PrivateRoute';\n\nimport { Layout, notification } from 'antd';\nconst { Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    }\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n\n    notification.config({\n      placement: 'topRight',\n      top: 70,\n      duration: 3,\n    });    \n  }\n\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  handleLogout(redirectTo=\"/\", notificationType=\"success\", description=\"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n\n    this.props.history.push(redirectTo);\n    \n    notification[notificationType]({\n      message: 'Polling App',\n      description: description,\n    });\n  }\n\n  handleLogin() {\n    notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\",\n    });\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if(this.state.isLoading) {\n      return (<LoadingIndicator />\n       \n      )\n    }\n    return (\n        <Layout className=\"app-container\">\n          <AppHeader isAuthenticated={this.state.isAuthenticated} \n            currentUser={this.state.currentUser} \n            onLogout={this.handleLogout} />\n\n          <Content className=\"app-content\">\n            <div className=\"container\">\n              <Switch>      \n                <Route exact path=\"/\" \n                  render={(props) => <PollList isAuthenticated={this.state.isAuthenticated} \n                      currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n                </Route>\n                <Route path=\"/login\" \n                  render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n                <Route path=\"/signup\" component={Signup}></Route>\n                <Route path=\"/users/:username\" \n                  render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                </Route>\n                <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={NewPoll} handleLogout={this.handleLogout}></PrivateRoute>\n                <Route component={NotFound}></Route>\n              </Switch>\n            </div>\n          </Content>\n        </Layout>\n    );\n  }\n}\n\nexport default withRouter(App);","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\nregisterServiceWorker();"],"sourceRoot":""}